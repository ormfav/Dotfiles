;(setq initial-scratch-message nil)
(kill-buffer-and-window "*scratch*")
(setq initial-buffer-choice "~/Org/todolist.org")

; package manager configuration
;(defvar bootstrap-version)
;(let ((bootstrap-file
;       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
;      (bootstrap-version 5))
;  (unless (file-exists-p bootstrap-file)
;    (with-current-buffer
;        (url-retrieve-synchronously
;         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
;         'silent 'inhibit-cookies)
;      (goto-char (point-max))
;      (eval-print-last-sexp)))
;  (load bootstrap-file nil 'nomessage))
;(setq package-enable-at-startup nil)
;(straight-use-package 'use-package)
(require 'package)      
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
						 ("org" . "https://orgmode.org/elpa/")
						 ("elpa" . "https://elpa.gnu.org/packages/"))) 
(package-initialize)    
;; refresh the packages unless the archive exists 
(unless package-archive-contents(package-refresh-contents))
; "-p" predicate function that returns true or Nil: if use-package is not installed, installs it
(unless (package-installed-p 'use-package)
  (package-install 'use-package)) 
(require 'use-package) 

;; ensures packages are downloaded before used
(setq use-package-always-ensure t) 

;; cleaner files and folders
(use-package no-littering
  :init(setq auto-save-file-name-transforms
				`((".*" ,(no-littering-expand-var-file-name "auto-save/") t)
			 custom-file (expand-file-name "custom.el" user-emacs-directory)))
 )

;; == editor setup ==
(load-file "~/.emacs.d/Config/general.el")
(load-file "~/.emacs.d/Config/helpers.el")
(load-file "~/.emacs.d/Config/evil.el")

(define-key emacs-lisp-mode-map (kbd "C-x x") 'eval-buffer) ;define-key sets a keybinding only for a specific mode
(global-set-key (kbd "<escape>") 'keyboard-escape-quit) ;delete partially insterted command with ESC as in vim (no more C-g)
(global-set-key (kbd "C-M-w") 'counsel-switch-buffer)

;; == theme and aesthetics ==
(load-file "~/.emacs.d/Config/theme.el")

;; == org mode config == 
(load-file "~/.emacs.d/Config/org.el")
(org-agenda nil "a")

;; == coding and file editing ==
(load-file "~/.emacs.d/Config/misc.el")
(load-file "~/.emacs.d/Config/completion.el")
(load-file "~/.emacs.d/Config/latex.el")
(load-file "~/.emacs.d/Config/python.el")


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(no-littering ewal-evil-cursors ewal-spacemacs-themes ewal cdlatex CDLaTeX all-the-icons solaire-mode org-roam visual-fill-column org-bullets kaolin-themes kaolin-theme apropospriate-theme darktooth-themes which-key use-package sublime-themes rainbow-delimiters org ivy-rich gruvbox-theme general evil doom-themes counsel auctex)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:background nil)))))
